generic(appointment, [], [description([range atom, help message("The description must be a string"), if_new ask_user("What is this appointment?"), cache true]), location([range atom, help message("The location must be a string"), if_needed ask_user, cache true]), appointment_date([if_new ask_user("What day is the appointment?"), cache true, range is_date, help message("Date has form: date(Year, Month, Day)"), default today]), appointment_time([if_new ask_user("What is the time of the appointment?"), cache true, range is_time, help message("Time has form: time(Hour, Minute, Second)"), default time_now]), duration([default time(1, 0, 0), cache true, if_new ask_user])])!
generic(person, [], [name([range atom, help message("Name must be a string"), if_new ask_user, cache true]), institution([range atom, help message("Institution must be a string")]), department([range atom, help message("Department must be a string")]), address([range atom, help message("Address must be a string")]), email([range atom, help message("Email must be a string"), if_needed ask_user, cache true]), phone([range atom, help message("Telephone number must be a string")]), appointments([range atom, help message("An appointment must be an appointment frame"), multivalued true])])!
instance(arun, [person], [name("Arun Sharma"), email(arun)])!
generic(meeting, [appointment], [attendees([range person, help (message("An attendee must be a person frame") , if atom(new_value) and yes_no_box("Is this a new person?") then frame(new_value, [person], []) , attendees has_value new_value), multivalued true, if_new ask_user("Who is the meeting with?"), cache true])])!
instance(icml_meeting, [meeting], [description("ICML Meeting"), appointment_date(date(2002, 4, 7)), appointment_time(time(18, 30, 25)), attendees([arun])])!
