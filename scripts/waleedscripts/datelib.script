aff :: {yes | ok | fine | no problem | sure | whatever you say};

neg :: {no | never | not on your life | * off };

month :: 
	{ 
		january | february| march| april| may| june| july| august| september| october| november| december | 
		jan | feb | mar | apr | may | jun | jul | aug | sep | oct | nov | dec 
	}; 

weekday :: { 
		sun | mon | tue | wed | thu | fri | sat | 
	     	sunday | monday | tuesday | wednesday | thursday | friday | saturday 
}; 

ordinalones :: { first | second | third | fourth | fifth | sixth | seventh | eighth | ninth }; 

cardinalones :: { one | two | three | four | five | six | seven | eight | nine |
	1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 
	}; 

ordinalteens :: { tenth | eleventh | twelfth | thirteenth | fourteenth | 
	fifteenth | sixteenth | seventeenth | eighteenth | nineteenth
	}; 

cardinalteens :: {	
	ten | eleven | twelve | thirteen | fourteen | fifteen | sixteen | seventeen
	| eighteen | nineteen |
	10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19
	};

cardinaltens :: {
	twenty |  thirty |  forty | fifty |  sixty |  seventy | eighty | ninety
	}; 

numslt100 :: {
	20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 
	30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 
	40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 |
	50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 
	60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 
	70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 
	80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 
	90 | 91 | 92 | 93 | 94 | 95 | 96 | 97 | 98 | 99
	}; 

cardinalslt100 :: { 
	<cardinalones> | <cardinalteens> | <cardinaltens> <cardinalones> | <cardinaltens> | <numslt100> }; 

daysones :: { <ordinalones> | <cardinalones> }; 

daysteens :: { <ordinalteens> | <cardinalteens> }; 
	
daystwenties :: { 
	 twenty <daysones> | twenty-<daysones> | twenty 
	}; 
	
daysthirties :: { 
	thirty one | thirty-one | thirty-first | thirty first | thirtieth | thirty 
	};

daysofmonth :: {
	<daysones> | <daysteens> | <daystwenties> | <daysthirties> 
	}; 
	
hours :: 	{ 
	<cardinalslt100> 
	}; 	

minutes :: { 
	<cardinalslt100> | quarter | half 
	}; 

amids :: {	in the morning | am | a m }; 

pmids :: { in the evening | in the afternoon | pm | p m }; 

c_time :: 
	init * ==> 
	[
		^1? 
	]
	<hours> <minutes> <amids> ==> 
	[
		 
		#return(time(parsecard(^1), parsecard(^2), 0 ))
	]

	<hours> <minutes> <pmids> ==>
	[
		#return(time(parsecard(^1) + 12, parsecard(^2), 0))

	]

	<hours> <minutes> #(clearhour(parsecard(^1))) ==> 
	[
		#return(defaulttime(parsecard(^1), parsecard(^2)))

	]	

	<hours> <minutes> ==> 
	[
                                #putprop(global, tmptime, time(parsecard(^1), parsecard(^2), 0))
		Do you mean a.m. or p.m.? 
	]

	<hours> { oclock | o'clock } #(clearhour(parsecard(^1))) ==> 
	[ 
		#return(defaulttime(parsecard(^1), 0))

	]

	<hours> { oclock | o'clock } ==> 
	[ 
		#putprop(global, tmptime, time(parsecard(^1), 0, 0))
		Do you mean ^1 a.m. or p.m.? 
	]


	<hours> <amids>  ==> 
	[
		#return(time(parsecard(^1), 0, 0))

	]

	<hours> <pmids>  ==>
	[
		 
		#return(time((parsecard(^1) + 12), 0, 0))

	]

	<minutes>  past <hours> <amids> ==> 
	[
		#return(time(parsecard(^2), parsecard(^1), 0 ))
	]

	<minutes> past <hours> <pmids>  ==>
	[
		#return(time(parsecard(^2) + 12, parsecard(^1), 0))
	]		

	<minutes> past <hours> #clearhour(parsecard(^2)) ==> 
	[
	 	 #return(defaulttime(parsecard(^2), parsecard(^1)))
	]

	<minutes> past <hours> ==> 
	[
		#putprop(global, tmptime, time(parsecard(^1), parsecard(^2), 0))
		Do you mean a.m. or p.m.? 
	]

	<minutes>  to <hours> <amids> ==> 
	[
		 #return(minssub(^1, ^2, am))
	]

	<minutes> to <hours> <pmids>  ==>
	[
		#return(minssub(^1, ^2, pm))
	]		

	<minutes> to <hours> #clearhour(parsecard(^2)) ==> 
	[
	 	 #return(minssub(^1, ^2, 'default'))
	]

	<minutes> to <hours> ==> 
	[
		#putprop(global, tmptime, minssub(^1, ^2, am))
		Do you mean a.m. or p.m.? 
	]

                <amids> #gottime(foo) ==> 
	[
                       	#return(makeam(getprop(global, tmptime)))
		#remprop(global, tmptime)
                ]

                <pmids> #gottime(foo) ==> 
	[
                       	#return(makepm(getprop(global, tmptime)))
		#remprop(global, tmptime)

                ]

	NOMOREALTS ==> {
		Again, please? 
	|
		I didn't hear. Could you say that again? 
	| 
		Beg your pardon? 
	}
	* ==> 
	[
		+INCA Recog Alt+
	]

c_date ::
	init *==> 
	[
		^1? 
	]
	today ==> 
	[
		Thank you. 
		#return(today)
	]

	tomorrow ==> 
	[
		#return(tomorrow)
	]
	
	next <weekday> ==> 
	[
		#return(calcnextweekday(^1))
	]

	{ <cardinalslt100>  days from { now | today }}  ==> 
	[	
		#return(dateadd(parsecard(^1), today))
	]

	<daysofmonth> ==> 
	[
		#return(defaultdate(date(-1, -1, dayofm(^1)))))
	]
	
	<daysofmonth> <month> ==> 
	[
	 	#return(defaultdate(date(-1, pmonth(^2), dayofm(^1))))
	]

	<daysofmonth> of <month> ==> 
	[
	 	#return(defaultdate(date(-1, pmonth(^2), dayofm(^1))))

	]
	NOMOREALTS ==> {
		Again, please? 
	|
		I didn't hear. Could you say that again? 
	| 
		Beg your pardon? 
	}

	* ==> 
	[
		+INCA Recog Alt+
	]

c_string ::
	init *==> 
	[
		^1 ? 
	]
	* ==> 
	[
		#return(^1)
	]

